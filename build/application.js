// Generated by CoffeeScript 1.6.1
(function() {
  'use-strict';
  var loadRelaters, sender, sender_message, success_stream,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.base_url = "http://lit-refuge-2289.herokuapp.com";

  window.relater_send_queue = [];

  window.message_to_send = null;

  window.relater_collection = null;

  sender = null;

  window.logged_in_user = null;

  sender_message = null;

  window.messages = null;

  window.transformed_message = null;

  window.popup_window_opened = false;

  window.is_custom_message = false;

  window.custom_message = "";

  window.messages_with_options = null;

  this.InfoView = (function(_super) {

    __extends(InfoView, _super);

    function InfoView() {
      return InfoView.__super__.constructor.apply(this, arguments);
    }

    InfoView.prototype.render = function(message) {
      this.$el.html(HAML["info_view"]({
        "info": message
      }));
      return this;
    };

    return InfoView;

  })(Backbone.View);

  window.loadViews = function() {
    var message_collection_view;
    chrome.runtime.onMessage.addListener(function(message, sender, sendResponse) {
      return window.dissectRecievedMessage(message);
    });
    window.peer = new Peer('fight_rigorously', {
      key: '2n9conp4vga2a9k9'
    });
    window.peer.on('call', function(call) {
      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
      return navigator.getUserMedia({
        video: true,
        audio: true
      }, function(stream) {
        call.answer(stream);
        return call.on('stream', success_stream);
      }, function(err) {
        return console.log('Failed to get local stream', err);
      });
    });
    $("#start_call").click(function(event) {
      event.preventDefault();
      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
      return navigator.getUserMedia({
        video: true,
        audio: true
      }, function(stream) {
        var call;
        call = window.peer.call('fight_rigorously_2', stream);
        return call.on('stream', success_stream);
      }, function(err) {
        return console.log('Failed to get local stream', err);
      });
    });
    window.relater_collection_view = new RelatersCollectionView({
      "collection": window.relater_collection
    });
    if (window.relater_collection.models.length > 0) {
      $("#relaters_of_the_user").html(window.relater_collection_view.render().el);
    } else {
      $("#relaters_of_the_user").html(new InfoView().render("You have no contacts!").$el);
    }
    message_collection_view = new MessageCollectionView({
      "collection": window.messages_with_options
    });
    $("#thread_and_messages").html(message_collection_view.render().$el);
    $("#submit_custom_message").click(sendMessage);
    return initializeValues();
  };

  success_stream = function(remoteStream) {
    return $("#chat_video").attr("src", window.URL.createObjectURL(remoteStream));
  };

  window.dissectRecievedMessage = function(recieved_message) {
    var payload;
    if (window.relater_collection !== null) {
      payload = JSON.parse(recieved_message.payload);
      sender = window.relater_collection.findWhere({
        "id": Number(payload.user_id)
      });
      $("input[data-relater-id='" + sender.id + "']").prop("checked", true);
      console.log(payload.is_custom_message);
      if (payload.is_custom_message === "false") {
        return window.messages.getMessageInfo(Number(payload.message_id), function(payload_message) {
          return window.messages.loadOptionsforMessage(Number(payload.message_id), function() {
            return window.getTransformedMessage(sender, window.logged_in_user.name, payload_message.transform_pattern);
          });
        });
      } else {
        window.transformed_message = payload.custom_message;
        return window.getTransformedMessage(sender, window.logged_in_user.name, null);
      }
    }
  };

  loadRelaters = function(user_id, call_back) {
    window.relater_collection = new RelaterCollection({
      "user_id": user_id
    });
    return window.relater_collection.fetch({
      success: function() {
        window.loadViews();
        return console.log("relaters retrieved");
      },
      error: function() {
        window.loadViews();
        return console.log("relaters retrieval error");
      }
    });
  };

  window.initialize_extension = function(call_back) {
    window.messages = new Messages();
    window.messages.init();
    return chrome.storage.local.get(["registered", "registered_user"], function(result) {
      var sign_up_view;
      if (result.registered === void 0 || result.registered_user === void 0) {
        sign_up_view = new SignupView(loadRelaters);
        $("#sign_up_view").html(sign_up_view.render().$el);
        $("#sign_up_view_modal").modal({
          keyboard: false
        });
        return $("#sign_up_view_modal").modal('show');
      } else {
        window.logged_in_user = result.registered_user;
        return loadRelaters(window.logged_in_user.id, call_back);
      }
    });
  };

  window.getTransformedMessage = function(sender, reciever_name, transform_pattern) {
    var message_transform_helper, transformed_message;
    message_transform_helper = new MessageTransformation();
    message_transform_helper.init(transform_pattern, sender.name, reciever_name);
    message_transform_helper.applyTransformation();
    transformed_message = message_transform_helper.getMessage();
    return window.putMessageinThread(relater, message, message_id, sent_by_relater);
  };

  window.initializeValues = function() {
    window.user_to_send = null;
    window.message_to_send = null;
    window.transformed_message = null;
    window.is_custom_message = false;
    window.custom_message = "";
    return window.options_for_message = [];
  };

  window.setMessageOptions = function(sender_window, sender) {
    window.broadcast_message = {
      "relater_id": sender.id,
      "relater_to_send": sender.toJSON(),
      "transformed_message": window.transformed_message
    };
    return window.sendBroadcastMessage();
  };

  window.sendMessage = function(message, is_custom_message, custom_message) {
    var data, relater_to_send, _i, _len, _ref, _results;
    _ref = window.relater_send_queue;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      relater_to_send = _ref[_i];
      data = {
        "sender_id": window.logged_in_user.id,
        "channel_id": relater_to_send.channel_id,
        "is_custom_message": is_custom_message,
        "custom_message": custom_message
      };
      if (!is_custom_message) {
        data["message_id"] = message.msg_id;
      } else {
        data["message_id"] = " ";
      }
      _results.push($.post(base_url + "/calltheteam/sendmessage", data, null));
    }
    return _results;
  };

  window.putMessageinThread = function(relater, message, message_id, sent_by_relater) {
    var relater_thread_key, thread, thread_params;
    thread_params = {
      "relater_id": sent_by.id,
      "transformed_message": message,
      "message_id": message_id,
      "sent_by_relater": sent_by_relater
    };
    thread = new Thread(thread_params);
    relater_thread_key = String(relater.id);
    return chrome.storage.local.set({
      relater_thread_key: thread
    }, function() {
      return console.log("thread message saved");
    });
  };

  window.openOptionsPopup = function(collection) {
    var options_collection;
    options_collection = new MessageCollectionView({
      "collection": collection
    });
    return $("#some_selector");
  };

  window.addRelaterToCollection = function(relater, call_back) {
    window.relater_collection.add(relater);
    if (call_back !== null && call_back !== void 0) {
      return call_back(relater);
    }
  };

  window.getRelaterThread = function(sender_id) {
    return window.relater_threads[sender_id];
  };

  document.addEventListener("DOMContentLoaded", initialize_extension);

}).call(this);
