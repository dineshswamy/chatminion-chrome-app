// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this;

  this.Messages = (function() {

    function Messages() {
      var _this = this;
      this.fetchMessages = function(callback, result) {
        return Messages.prototype.fetchMessages.apply(_this, arguments);
      };
      this.version = 3;
      this.database = null;
      this.transaction = null;
      this.base_url = window.base_url;
      this.messages_url = this.base_url + "/messages.json";
      this.message_options_url = this.base_url + "/message_options.json";
      this.db_name = "calltheteam";
    }

    Messages.prototype.init = function(callback) {
      var _this = this;
      this.request = indexedDB.open(this.db_name, this.version);
      this.request.onupgradeneeded = function(event) {
        var db, object_store_message_options, object_store_messages;
        db = event.target.result;
        if (db.objectStoreNames.contains("messages")) {
          db.deleteObjectStore("messages");
        }
        if (db.objectStoreNames.contains("message_options")) {
          db.deleteObjectStore("message_options");
        }
        object_store_messages = db.createObjectStore("messages", {
          keyPath: "id"
        });
        return object_store_message_options = db.createObjectStore("message_options", {
          keyPath: "id"
        });
      };
      this.request.onsuccess = function(event) {
        _this.database = event.target.result;
        return chrome.storage.local.get("last_updated", function(result) {
          return _this.fetchMessages(callback, result);
        });
      };
      return this.request.onerror = function(event) {
        return console.log("database_logging_error" + event.value);
      };
    };

    Messages.prototype.fetchMessages = function(callback, result) {
      var current_date, current_date_string, last_updated, last_updated_date, now, result_last_updated;
      now = new Date();
      console.log("Inside fetch messages");
      current_date = new Date(now.getYear(), now.getMonth(), now.getDate());
      current_date_string = now.getYear() + "/" + now.getMonth() + "/" + now.getDate();
      result_last_updated = result["last_updated"];
      console.log(result_last_updated);
      if (result_last_updated.split("/") === null) {
        this.fetch(current_date_string);
        return this.getAllMessages(callback);
      } else {
        console.log("fetchMessages");
        last_updated = result_last_updated.split("/");
        last_updated_date = new Date(last_updated[0], last_updated[1], last_updated[2]);
        if (last_updated_date < current_date) {
          this.fetch(current_date_string);
          return this.getAllMessages(callback);
        } else {
          return this.getAllMessages(callback);
        }
      }
    };

    Messages.prototype.addMessage = function(object_to_store) {
      var request;
      if (this.database !== null) {
        this.transaction = this.database.transaction(["messages", "message_options"], "readwrite");
        this.store = this.transaction.objectStore("messages");
        request = this.store.put(object_to_store);
        request.onsuccess = function(event) {
          return console.log("message successfully written");
        };
        return request.onerror = function(event) {
          return console.log("insertion error");
        };
      }
    };

    Messages.prototype.addMessageOptions = function(object_to_store) {
      var request;
      if (this.database !== null) {
        this.transaction = this.database.transaction(["messages", "message_options"], "readwrite");
        this.store = this.transaction.objectStore("message_options");
        request = this.store.put(object_to_store);
        request.onsuccess = function(event) {
          return console.log("message options successfully written");
        };
        return request.onerror = function(event) {
          return console.log("insertion error");
        };
      }
    };

    Messages.prototype.fetch = function(current_date) {
      var _this = this;
      return $.get(this.messages_url, function(data) {
        var messages, _i, _len;
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          messages = data[_i];
          _this.addMessage({
            "id": messages.msg_id,
            "user_message": messages.user_message,
            "transform_pattern": messages.transform_pattern
          });
        }
        return $.get(_this.message_options_url, function(data) {
          var message_option, _j, _len1;
          for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
            message_option = data[_j];
            _this.addMessageOptions({
              "id": message_option.id,
              "message_id": message_option.message_id,
              "options_id": message_option.options_id
            });
          }
          console.log(current_date);
          chrome.storage.local.set({
            "last_updated": current_date
          }, function() {
            return console.log("messages_updated");
          });
          return _this.getAllMessages();
        });
      });
    };

    Messages.prototype.getAllMessages = function(callback) {
      var arr_messages_with_options, message_transactions, messages_objectstore, objectstore;
      arr_messages_with_options = [];
      message_transactions = this.database.transaction(["message_options", "messages"]);
      objectstore = message_transactions.objectStore("message_options");
      messages_objectstore = message_transactions.objectStore("messages");
      return objectstore.openCursor().onsuccess = function(event) {
        var cursor;
        cursor = event.target.result;
        if (cursor) {
          return messages_objectstore.openCursor(cursor.value.message_id).onsuccess = function(event) {
            var messages_cursor;
            messages_cursor = event.target.result;
            arr_messages_with_options.push(messages_cursor.value);
            return cursor["continue"]();
          };
        } else {
          window.messages_with_options = new MessageCollection(arr_messages_with_options);
          if (callback !== null && callback !== void 0) {
            return callback();
          }
        }
      };
    };

    Messages.prototype.getMessageInfo = function(message_id, callback) {
      this.request = indexedDB.open(this.db_name, this.version);
      return this.request.onsuccess = function(event) {
        var message_transactions, messages_objectstore;
        this.database = event.target.result;
        message_transactions = this.database.transaction(["messages"]);
        messages_objectstore = message_transactions.objectStore("messages");
        return messages_objectstore.openCursor(message_id).onsuccess = function(event) {
          var cursor;
          cursor = event.target.result;
          if (cursor) {
            console.log(cursor.value);
            return callback(cursor.value);
          }
        };
      };
    };

    Messages.prototype.loadOptionsforMessage = function(message_id, callback) {
      var options_for_message;
      options_for_message = [];
      this.request = indexedDB.open(this.db_name, this.version);
      return this.request.onsuccess = function(event) {
        var message_transactions, messages_objectstore, objectstore;
        this.database = event.target.result;
        message_transactions = this.database.transaction(["message_options", "messages"]);
        objectstore = message_transactions.objectStore("message_options");
        messages_objectstore = message_transactions.objectStore("messages");
        return objectstore.openCursor().onsuccess = function(event) {
          var cursor, msg_id, options, _i, _len;
          cursor = event.target.result;
          if (cursor) {
            if (cursor.value.message_id === message_id) {
              options = cursor.value.options_id.split(";");
              for (_i = 0, _len = options.length; _i < _len; _i++) {
                msg_id = options[_i];
                messages_objectstore.openCursor(Number(msg_id)).onsuccess = function(event) {
                  var messages_cursor;
                  messages_cursor = event.target.result;
                  return options_for_message.push(messages_cursor.value);
                };
              }
            }
            return cursor["continue"]();
          } else if (callback !== null && callback !== void 0) {
            return callback(options_for_message);
          }
        };
      };
    };

    return Messages;

  })();

}).call(this);
