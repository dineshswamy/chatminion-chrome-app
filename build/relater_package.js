// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.RelatersViewContainer = (function(_super) {
    var add_new_relater_and_render, callback_check_and_addRelator, check_and_addRelator, openGmailForRequest;

    __extends(RelatersViewContainer, _super);

    function RelatersViewContainer() {
      return RelatersViewContainer.__super__.constructor.apply(this, arguments);
    }

    RelatersViewContainer.prototype.events = {
      "click button#submit_new_contact": "addcontact"
    };

    RelatersViewContainer.prototype.render = function() {
      this.$el.html(HAML["contacts_view"]);
      return this;
    };

    RelatersViewContainer.prototype.addcontact = function(event) {
      var new_contact_email;
      event.preventDefault();
      new_contact_email = $("#new_contact_email").val();
      return check_and_addRelator(new_contact_email);
    };

    check_and_addRelator = function(add_relater) {
      var data, url;
      data = {
        relater_email: add_relater,
        user_id: chrome.extension.getBackgroundPage().logged_in_user.id
      };
      url = chrome.extension.getBackgroundPage().base_url + "/calltheteam/addcontact";
      return $.post(url, data, callback_check_and_addRelator);
    };

    callback_check_and_addRelator = function(response_json) {
      var new_relater;
      console.log(response_json.status);
      new_relater = {
        "id": response_json.new_relater.id,
        "name": response_json.new_relater.name,
        "channel_id": response_json.new_relater.channel_id
      };
      switch (response_json.status) {
        case response_json.status === "success":
          return add_new_relater_and_render(new_relater);
        case response_json.status === "user_not_registered":
          return openGmailForRequest();
      }
    };

    add_new_relater_and_render = function(relater) {
      var relater_collection_view;
      chrome.extension.getBackgroundPage().relater_collection.add(new_relater);
      console.log("adding the new relater");
      relater_collection_view = new RelatersCollectionView({
        "collection": chrome.extension.getBackgroundPage().relater_collection
      });
      return $("#contacts_container").html(relater_collection_view.render().el);
    };

    openGmailForRequest = function() {};

    return RelatersViewContainer;

  })(Backbone.View);

}).call(this);
