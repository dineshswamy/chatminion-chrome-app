// Generated by CoffeeScript 1.6.1
(function() {
  var loadRelaters, notificationandTTS, sender, sender_message, setWindowOptions;

  window.base_url = "http://lit-refuge-2289.herokuapp.com";

  window.user_to_send = null;

  window.message_to_send = null;

  window.relater_collection = null;

  sender = null;

  window.logged_in_user = null;

  sender_message = null;

  window.messages = null;

  window.transformed_message = null;

  window.popup_window_opened = false;

  window.is_custom_message = false;

  window.custom_message = "";

  window.opened_windows = {};

  window.relater_threads = {};

  window.messages_with_options = [];

  window.options_for_message = [];

  window.sendMessage = function(relater_to_send, message, is_custom_message, custom_message) {
    var data;
    data = {
      "sender_id": window.logged_in_user.id,
      "channel_id": relater_to_send.channel_id,
      "is_custom_message": is_custom_message,
      "custom_message": custom_message
    };
    if (!is_custom_message) {
      data["message_id"] = message.msg_id;
      window.putMessageinThread(relater_to_send, message.user_message, false);
    } else {
      window.putMessageinThread(relater_to_send, custom_message, false);
      data["message_id"] = " ";
    }
    return $.post(base_url + "/calltheteam/sendmessage", data, null);
  };

  notificationandTTS = function(notification_title, notification_message) {
    var notification;
    notification = webkitNotifications.createNotification(null, notification_title, notification_message);
    return notification.show();
  };

  window.getTransformedMessage = function(sender, reciever_name, transform_pattern) {
    var message_transform_helper;
    message_transform_helper = new MessageTransformation();
    message_transform_helper.init(transform_pattern, sender.name, reciever_name);
    message_transform_helper.applyTransformation();
    window.transformed_message = message_transform_helper.getMessage();
    window.putMessageinThread(sender, window.transformed_message, true);
    return openOptionsPopupwindow(sender);
  };

  window.openOptionsPopupwindow = function(sender) {
    var options;
    if (opened_windows[sender_id] === null) {
      options = {
        url: '../options_popup.html',
        type: "popup",
        width: 300,
        height: 600
      };
      return window.options_window_id = chrome.windows.create(options, function(this_window) {
        opened_windows[sender.id] = this_window.id;
        return setWindowOptions(this_window, sender);
      });
    } else {
      return chrome.windows.get(opened_windows[sender.id], null, function(this_window) {
        return setWindowOptions(this_window, sender);
      });
    }
  };

  setWindowOptions = function(sender_window, sender) {
    sender_window.relater_to_send = sender;
    sender_window.relater_threads = getRelaterThread(String(sender.id));
    sender_window.transformed_message = window.transformed_message;
    return sender_window.loadMessages();
  };

  window.dissectRecievedMessage = function(recieved_message) {
    var payload;
    console.log(recieved_message);
    window.initializeValues();
    if (window.relater_collection !== null) {
      payload = JSON.parse(recieved_message.payload);
      sender = window.relater_collection.findWhere({
        "id": Number(payload.user_id)
      });
      window.user_to_send = sender;
      console.log(payload.is_custom_message);
      if (payload.is_custom_message === "false") {
        return window.messages.getMessageInfo(Number(payload.message_id), function(payload_message) {
          return window.messages.loadOptionsforMessage(Number(payload.message_id), function() {
            return window.getTransformedMessage(sender, window.logged_in_user.name, payload_message.transform_pattern);
          });
        });
      } else {
        window.transformed_message = payload.custom_message;
        return window.getTransformedMessage(sender, window.logged_in_user.name, null);
      }
    }
  };

  window.initialize_extension = function(call_back) {
    window.messages = new Messages();
    window.messages.init();
    return chrome.storage.local.get(["registered", "registered_user"], function(result) {
      if (result.registered === void 0 || result.registered_user === void 0) {
        return window.logged_in_user = null;
      } else {
        window.logged_in_user = result.registered_user;
        loadRelaters(window.logged_in_user.id, call_back);
        return chrome.pushMessaging.onMessage.addListener(dissectRecievedMessage);
      }
    });
  };

  loadRelaters = function(user_id, call_back) {
    window.relater_collection = new RelaterCollection({
      "user_id": user_id
    });
    return window.relater_collection.fetch({
      success: function() {
        if (call_back !== null && call_back !== void 0) {
          call_back();
        }
        return console.log("relaters retrieved");
      },
      error: function() {
        return console.log("relaters retrieval error");
      }
    });
  };

  window.addRelaterToCollection = function(relater, call_back) {
    window.relater_collection.add(relater);
    if (call_back !== null && call_back !== void 0) {
      return call_back(relater);
    }
  };

  window.putMessageinThread = function(relater, message, sent_by) {
    var relater_thread_key, thread, thread_message;
    thread_message = {
      "message": message,
      "from_relater": sent_by
    };
    relater_thread_key = String(relater.id);
    thread = window.relater_threads[relater_thread_key];
    thread.push(thread_message);
    return window.relater_threads[relater_thread_key] = thread;
  };

  window.getRelaterThread = function(sender_id) {
    return window.relater_threads[sender_id];
  };

  window.initializeValues = function() {
    window.user_to_send = null;
    window.message_to_send = null;
    window.transformed_message = null;
    window.is_custom_message = false;
    window.custom_message = "";
    return window.options_for_message = [];
  };

  initialize_extension();

}).call(this);
